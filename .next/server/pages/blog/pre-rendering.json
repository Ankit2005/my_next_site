{"pageProps":{"mdxSource":{"compiledSource":"\"use strict\";\n\nvar _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Next.js has two forms of pre-rendering: \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Static Generation\"), \" and \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Server-side Rendering\"), \". The difference is in \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"when\"), \" it generates the HTML for a page.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Static Generation\"), \" is the pre-rendering method that generates the HTML at \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"build time\"), \". The pre-rendered HTML is then \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"reused\"), \" on each request.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Server-side Rendering\"), \" is the pre-rendering method that generates the HTML on \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"each request\"), \".\")), mdx(\"p\", null, \"Importantly, Next.js lets you \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"choose\"), \" which pre-rendering form to use for each page. You can create a \\\"hybrid\\\" Next.js app by using Static Generation for most pages and using Server-side Rendering for others.\"));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<p>Next.js has two forms of pre-rendering: <strong>Static Generation</strong> and <strong>Server-side Rendering</strong>. The difference is in <strong>when</strong> it generates the HTML for a page.</p><ul style=\"padding-left:1rem;padding-top:0.5rem\" class=\"css-0\"><li style=\"padding-bottom:0.25rem\" class=\"css-0\"><strong>Static Generation</strong> is the pre-rendering method that generates the HTML at <strong>build time</strong>. The pre-rendered HTML is then <em>reused</em> on each request.</li><li style=\"padding-bottom:0.25rem\" class=\"css-0\"><strong>Server-side Rendering</strong> is the pre-rendering method that generates the HTML on <strong>each request</strong>.</li></ul><p>Importantly, Next.js lets you <strong>choose</strong> which pre-rendering form to use for each page. You can create a &quot;hybrid&quot; Next.js app by using Static Generation for most pages and using Server-side Rendering for others.</p>","scope":{}},"frontMatter":{"wordCount":95,"readingTime":{"text":"1 min read","minutes":0.465,"time":27900,"words":93},"slug":"pre-rendering","title":"Two Forms of Pre-rendering","publishedAt":"2020-01-01","modifiedAt":"2021-3-13","author":"author","summary":"Next.js has two forms of pre-rendering: Static Generation and Server-side Rendering...","tags":["nextjs","ssr","optimization","asynchronous"]}},"__N_SSG":true}