{"pageProps":{"mdxSource":{"compiledSource":"\"use strict\";\n\nvar _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"We recommend using \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Static Generation\"), \" (with and without data) whenever possible because your page can be built once and served by CDN, which makes it much faster than having a server render the page on every request.\"), mdx(\"p\", null, \"You can use Static Generation for many types of pages, including:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Marketing pages\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Blog posts\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"E-commerce product listings\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Help and documentation\")), mdx(\"p\", null, \"You should ask yourself: \\\"Can I pre-render this page \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"ahead\"), \" of a user's request?\\\" If the answer is yes, then you should choose Static Generation.\"), mdx(\"p\", null, \"On the other hand, Static Generation is \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"not\"), \" a good idea if you cannot pre-render a page ahead of a user's request. Maybe your page shows frequently updated data, and the page content changes on every request.\"), mdx(\"p\", null, \"In that case, you can use \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Server-Side Rendering\"), \". It will be slower, but the pre-rendered page will always be up-to-date. Or you can skip pre-rendering and use client-side JavaScript to populate data.\"));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<p>We recommend using <strong>Static Generation</strong> (with and without data) whenever possible because your page can be built once and served by CDN, which makes it much faster than having a server render the page on every request.</p><p>You can use Static Generation for many types of pages, including:</p><ul style=\"padding-left:1rem;padding-top:0.5rem\" class=\"css-0\"><li style=\"padding-bottom:0.25rem\" class=\"css-0\">Marketing pages</li><li style=\"padding-bottom:0.25rem\" class=\"css-0\">Blog posts</li><li style=\"padding-bottom:0.25rem\" class=\"css-0\">E-commerce product listings</li><li style=\"padding-bottom:0.25rem\" class=\"css-0\">Help and documentation</li></ul><p>You should ask yourself: &quot;Can I pre-render this page <strong>ahead</strong> of a user&#x27;s request?&quot; If the answer is yes, then you should choose Static Generation.</p><p>On the other hand, Static Generation is <strong>not</strong> a good idea if you cannot pre-render a page ahead of a user&#x27;s request. Maybe your page shows frequently updated data, and the page content changes on every request.</p><p>In that case, you can use <strong>Server-Side Rendering</strong>. It will be slower, but the pre-rendered page will always be up-to-date. Or you can skip pre-rendering and use client-side JavaScript to populate data.</p>","scope":{}},"frontMatter":{"wordCount":158,"readingTime":{"text":"1 min read","minutes":0.78,"time":46800,"words":156},"slug":"ssg-ssr","title":"When to Use Static Generation v.s. Server-side Rendering","publishedAt":"2020-01-02","modifiedAt":"2021-3-13","author":"author","summary":"the difference between server-side Rendering and Static Generation","tags":["nextjs","ssr","optimization","asynchronous"]}},"__N_SSG":true}